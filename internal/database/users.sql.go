// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, full_name, email, harshed_password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, harshed_password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	ID              uuid.UUID `json:"id"`
	Username        string    `json:"username"`
	FullName        string    `json:"full_name"`
	Email           string    `json:"email"`
	HarshedPassword string    `json:"harshed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HarshedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HarshedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, full_name, email, created_at FROM users
WHERE username = $1 LIMIT 1
`

type GetUserRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWithPassword = `-- name: GetUserWithPassword :one
SELECT id, username, harshed_password, full_name, email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserWithPassword(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithPassword, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HarshedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET harshed_password = $2, password_changed_at = $3
WHERE id = $1
RETURNING id, username, harshed_password, full_name, email, password_changed_at, created_at
`

type UpdateUserParams struct {
	ID                uuid.UUID `json:"id"`
	HarshedPassword   string    `json:"harshed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.HarshedPassword, arg.PasswordChangedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HarshedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
